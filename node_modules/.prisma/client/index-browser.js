
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.19.0
 * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
 */
Prisma.prismaVersion = {
  client: "2.19.0",
  engine: "c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CategoriesScalarFieldEnum = makeEnum({
  CategoryID: 'CategoryID',
  CategoryName: 'CategoryName',
  Description: 'Description',
  Picture: 'Picture'
});

exports.Prisma.CustomercustomerdemoScalarFieldEnum = makeEnum({
  CustomerID: 'CustomerID',
  CustomerTypeID: 'CustomerTypeID'
});

exports.Prisma.CustomerdemographicsScalarFieldEnum = makeEnum({
  CustomerTypeID: 'CustomerTypeID',
  CustomerDesc: 'CustomerDesc'
});

exports.Prisma.CustomersScalarFieldEnum = makeEnum({
  CustomerID: 'CustomerID',
  CompanyName: 'CompanyName',
  ContactName: 'ContactName',
  ContactTitle: 'ContactTitle',
  Address: 'Address',
  City: 'City',
  Region: 'Region',
  PostalCode: 'PostalCode',
  Country: 'Country',
  Phone: 'Phone',
  Fax: 'Fax'
});

exports.Prisma.EmployeesScalarFieldEnum = makeEnum({
  EmployeeID: 'EmployeeID',
  LastName: 'LastName',
  FirstName: 'FirstName',
  Title: 'Title',
  TitleOfCourtesy: 'TitleOfCourtesy',
  BirthDate: 'BirthDate',
  HireDate: 'HireDate',
  Address: 'Address',
  City: 'City',
  Region: 'Region',
  PostalCode: 'PostalCode',
  Country: 'Country',
  HomePhone: 'HomePhone',
  Extension: 'Extension',
  Photo: 'Photo',
  Notes: 'Notes',
  ReportsTo: 'ReportsTo',
  PhotoPath: 'PhotoPath'
});

exports.Prisma.EmployeeterritoriesScalarFieldEnum = makeEnum({
  EmployeeID: 'EmployeeID',
  TerritoryID: 'TerritoryID'
});

exports.Prisma.OrderdetailsScalarFieldEnum = makeEnum({
  OrderID: 'OrderID',
  ProductID: 'ProductID',
  UnitPrice: 'UnitPrice',
  Quantity: 'Quantity',
  Discount: 'Discount'
});

exports.Prisma.OrdersScalarFieldEnum = makeEnum({
  OrderID: 'OrderID',
  CustomerID: 'CustomerID',
  EmployeeID: 'EmployeeID',
  OrderDate: 'OrderDate',
  RequiredDate: 'RequiredDate',
  ShippedDate: 'ShippedDate',
  ShipVia: 'ShipVia',
  Freight: 'Freight',
  ShipName: 'ShipName',
  ShipAddress: 'ShipAddress',
  ShipCity: 'ShipCity',
  ShipRegion: 'ShipRegion',
  ShipPostalCode: 'ShipPostalCode',
  ShipCountry: 'ShipCountry'
});

exports.Prisma.ProductsScalarFieldEnum = makeEnum({
  ProductID: 'ProductID',
  ProductName: 'ProductName',
  SupplierID: 'SupplierID',
  CategoryID: 'CategoryID',
  QuantityPerUnit: 'QuantityPerUnit',
  UnitPrice: 'UnitPrice',
  UnitsInStock: 'UnitsInStock',
  UnitsOnOrder: 'UnitsOnOrder',
  ReorderLevel: 'ReorderLevel',
  Discontinued: 'Discontinued'
});

exports.Prisma.RegionsScalarFieldEnum = makeEnum({
  RegionID: 'RegionID',
  RegionDescription: 'RegionDescription'
});

exports.Prisma.ShippersScalarFieldEnum = makeEnum({
  ShipperID: 'ShipperID',
  CompanyName: 'CompanyName',
  Phone: 'Phone'
});

exports.Prisma.SuppliersScalarFieldEnum = makeEnum({
  SupplierID: 'SupplierID',
  CompanyName: 'CompanyName',
  ContactName: 'ContactName',
  ContactTitle: 'ContactTitle',
  Address: 'Address',
  City: 'City',
  Region: 'Region',
  PostalCode: 'PostalCode',
  Country: 'Country',
  Phone: 'Phone',
  Fax: 'Fax',
  HomePage: 'HomePage'
});

exports.Prisma.TerritoriesScalarFieldEnum = makeEnum({
  TerritoryID: 'TerritoryID',
  TerritoryDescription: 'TerritoryDescription',
  RegionID: 'RegionID'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  categories: 'categories',
  customercustomerdemo: 'customercustomerdemo',
  customerdemographics: 'customerdemographics',
  customers: 'customers',
  employees: 'employees',
  employeeterritories: 'employeeterritories',
  orderdetails: 'orderdetails',
  orders: 'orders',
  products: 'products',
  regions: 'regions',
  shippers: 'shippers',
  suppliers: 'suppliers',
  territories: 'territories'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
